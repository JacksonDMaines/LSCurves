slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (x - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
#return lagtime
return(lag)
}
x = -10:10
y = exp(x) / (1 + exp(x))
z = y + rnorm(length(y), 0,.02)
x2 = 0:20
plot(x2, z)
plot(x2, z)
plot(x2, z)
test <- deriv(time = x2, meas = z)
test
plot(x2, test)
test <- differences(time = x2, meas = z, showplot = TRUE)
# Second Idea:
# Some differences function
differences <- function(times, meas, showplot = FALSE){
ans <- rep(NA, length(meas))
ans[1] <- 0
for (i in 1:(length(meas)-1)){
slope <- meas[i+1] - meas[i]
ans[i+1] <- slope
}
if(showplot == TRUE){
plot(times, ans, type = "l")
}
return(ans)
}
test <- differences(time = x2, meas = z, showplot = TRUE)
test
lag <- lagtime(time = x2, meas = z, differences = test)
lag
plot(x2, z)
plot(x2, z)
abline(v = 7.966322)
plot(x2, log(z))
abline(v = 7.966322)
plot(x2, z)
abline(v = 7.966322)
# Create function to find lag time
lagtime <- function(time, meas, differences){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (x - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(times, meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (x - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(times, meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (x - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
lag
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
?abline
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (x - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
lines(time, y)
abline(h = min_meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
?lines
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (x - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
lines(time, y, type = "l")
abline(h = min_meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (time - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
lines(time, y, type = "l")
abline(h = min_meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
lag
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (time - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
lines(time, y)
abline(h = min_meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (time - time[maxgrowth]) - meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
lines(time, y)
abline(h = min_meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
# Third Idea:
# Fit lm between points and find rate of change by subtracting last slope
# by new slope?
deriv2 <- function(time, meas, window = 3){
#First log meas
#Then window n points
#Fit lm model and get slope?
#fit next model and differnce slope?
}
# Second Idea:
# Some differences function
differences <- function(times, meas, showplot = FALSE){
ans <- rep(NA, length(meas))
ans[1] <- 0
for (i in 1:(length(meas)-1)){
slope <- meas[i+1] - meas[i]
ans[i+1] <- slope
}
if(showplot == TRUE){
plot(times, ans, type = "l")
}
return(ans)
}
# Create function to find derivs? or changes
# First Idea:
# Some weird slope function
deriv <- function(times, meas){
# first we need to log y
log_y <- log(meas)
ans <- rep(NA, length(meas))
ans[1] <- 0
for (i in 1:(length(log_y)-1)){
slope <- abs(((log_y[i+1] - log_y[i]) / ((times[i+1] - length(times)/2) - meas[i])))
ans[i+1] <- slope
}
return(ans)
}
x = -10:10
y = exp(x) / (1 + exp(x))
z = y + rnorm(length(y), 0,.02)
x2 = 0:20
plot(x2, z)
test <- deriv(time = x2, meas = z)
test
plot(x2, test)
test <- differences(time = x2, meas = z, showplot = TRUE)
test
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
lag
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (time - time[maxgrowth]) + meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
lines(time, y)
abline(h = min_meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
lag
plot(x2, z)
abline(v = 7.484296)
plot(x2, log(z))
abline(v = 7.484296)
x = -20:20
y = exp(x) / (1 + exp(x))
z = y + rnorm(length(y), 0,.02)
x2 = 0:40
plot(x2, z)
test <- deriv(time = x2, meas = z)
test
plot(x2, test)
test <- differences(time = x2, meas = z, showplot = TRUE)
test
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
plot(x2, log(z))
abline(v = 7.484296)
plot(x2, z)
?log
plot(x2, log(z))
x = -20:20
y = exp(x) / (1 + exp(x))
z = y + rnorm(length(y), 0,.02) + .1
x2 = 0:40
plot(x2, z)
test <- deriv(time = x2, meas = z)
test
plot(x2, test)
test <- differences(time = x2, meas = z, showplot = TRUE)
test
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
plot(x2, log(z))
abline(v = 7.484296)
plot(x2, z)
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
lag
abline(v = 17.55913)
plot(x2, log(z))
abline(v = 17.55913)
?which
test <- c(1,2,3,4,5,6)
which(test > 3)
meas <- c(1,2,3,4,5,6)
meas[1:3]
meas[1:]
meas[1:0]
meas[1:-1]
meas[1:end]
meas[-(1:2)]
which(test > 3)
length(which(test > 3))
meas[-(1:length(which(test > 3)))]
length(which(test > 4))
meas[-(1:length(which(test > 4)))]
which(test > 4)
meas[length(which(test > 4):length(meas)]
meas[length(which(test > 4)):length(meas)]
length(which(test > 4))
which(test > 4)
meas[(length(meas) - length(which(test > 4))):length(meas)]
?setdiff
setdiff(1, 2)
setdiff(1, 4)
x <-  1:6
y <-  x + rnorm(6, 0, .1)
#abs((x[2]-x[1])*(y[3]-y[1]) - (y[2]-y[1])*(x[3]-x[1]))
#abs((x[3]-x[2])*(y[4]-y[2]) - (y[3]-y[2])*(x[4]-x[2]))
#abs((x[4]-x[3])*(y[5]-y[3]) - (y[4]-y[3])*(x[5]-x[3]))
#abs((x[5]-x[4])*(y[6]-y[4]) - (y[5]-y[4])*(x[6]-x[4]))
plot(x,y)
x = -20:20
y = exp(x) / (1 + exp(x))
z = y + rnorm(length(y), 0,.02) + .1
x2 = 0:40
plot(x2, z)
test <- differences(time = x2, meas = z, showplot = TRUE)
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
# Create function to find derivs? or changes
# First Idea:
# Some weird slope function
deriv <- function(times, meas){
# first we need to log y
log_y <- log(meas)
ans <- rep(NA, length(meas))
ans[1] <- 0
for (i in 1:(length(log_y)-1)){
slope <- abs(((log_y[i+1] - log_y[i]) / ((times[i+1] - length(times)/2) - meas[i])))
ans[i+1] <- slope
}
return(ans)
}
# Second Idea:
# Some differences function
differences <- function(times, meas, showplot = FALSE){
ans <- rep(NA, length(meas))
ans[1] <- 0
for (i in 1:(length(meas)-1)){
slope <- meas[i+1] - meas[i]
ans[i+1] <- slope
}
if(showplot == TRUE){
plot(times, ans, type = "l")
}
return(ans)
}
# Third Idea:
# Fit lm between points and find rate of change by subtracting last slope
# by new slope?
deriv2 <- function(time, meas, window = 3){
#First log meas
#Then window n points
#Fit lm model and get slope?
#fit next model and differnce slope?
}
# Create function to find lag time
lagtime <- function(time, meas, differences, showplot = FALSE){
# first find max point in differences
maxgrowth <- which.max(differences)
# need slope
slope1 <- ((meas[maxgrowth + 1] - meas[maxgrowth]) / (time[maxgrowth + 1] - time[maxgrowth]))
slope2 <- ((meas[maxgrowth] - meas[maxgrowth - 1]) / (time[maxgrowth] - time[maxgrowth - 1]))
slope <- (slope1 + slope2) / 2
#fit tangent line to the point
y <- slope * (time - time[maxgrowth]) + meas[maxgrowth]
# y−y1=m(x−x1)
#find where it intersects with min meas value
min_meas <- min(meas)
lag <- ((min_meas - meas[maxgrowth]) / slope) + time[maxgrowth]
if(showplot == TRUE){
plot(time, meas)
lines(time, y)
abline(h = min_meas)
abline(v = lag)
}
#return lagtime
return(lag)
}
# Create function to find stationary time
#Sliding window with threshold and window parameters
stattime <- function(time, meas, lag, threshold = .1, window = 3){
# filter to points right of lagtime
time_l <-  which(time > lag)
meas_l <-  meas[(length(meas) - length(time)):length(meas)]
log_meas <- log(meas_l)
#sliding window
# find points that are linear in log
# define threshold value that breaks sliding window
# Idea: need every gap to satisfy threshold (of what?)
# when no gap satisfies the threshold, then the first point of
# window is stationary time
# not sure this is the best idea anymore
# need to check
# so i is the start of the window
# j is end of the window
for (i in 1:(length(log_meas) - window)) {
for (j in 1:window) {
log_meas
}
}
#return stationary time
}
test <- differences(time = x2, meas = z, showplot = TRUE)
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
x = -30:30
y = exp(x) / (1 + exp(x))
z = y + rnorm(length(y), 0,.02) + .1
x2 = 0:60
plot(x2, z)
test <- deriv(time = x2, meas = z)
test
plot(x2, test)
test <- differences(time = x2, meas = z, showplot = TRUE)
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
plot(x2, log(z))
abline(v = 17.55913)
lag
plot(x2, log(z))
abline(v = 26.7184)
.5*.1
which(x < 4)
x <-  1:6
which(x < 3)
which(x < 4)
which(y < 5)
y <-  x + rnorm(6, 0, .1)
y
which(y < 3)
test <- differences(time = x2, meas = log(z), showplot = TRUE)
plot(x2, z)
x = -30:30
y = exp(x) / (1 + exp(x))
z = y + rnorm(length(y), 0,.02) + .1
x2 = 0:60
plot(x2, z)
test <- differences(time = x2, meas = log(z), showplot = TRUE)
plot(x2, z)
test <- differences(time = x2, meas = z, showplot = TRUE)
lag <- lagtime(time = x2, meas = z, differences = test, showplot = TRUE)
plot(x2, log(z))
abline(v = 26.7184)
test <- differences(time = x2, meas = log(z), showplot = TRUE)
abline(v = 26.7184)
